searchState.loadedDescShard("wasmedge_sdk", 0, "Overview\nThe array type that can hold all the represented values.\nThe object as an module instance is required to implement …\nDefines WasmEdge ahead-of-time(AOT) compiler and the …\nDefines WasmEdge AOT compiler optimization level.\nDefines WasmEdge AOT compiler output binary format.\nIdentifies an immutable global variable.\nContains the error value\nDefines the types of the exported instances.\nRefers to the infinite union of all references to objects …\nA reference to object.\nDefines the type of external WasmEdge instances.\n32-bit floating-point data as defined by the IEEE 754-2019.\n64-bit floating-point data as defined by the IEEE 754-2019.\nA WasmEdge instance that is a WasmEdge Func.\nRefers to the infinite union of all references to host …\nA reference to a host function.\nStruct of WasmEdge FuncType.\nA WasmEdge instance that is a WasmEdge Global.\nStruct of WasmEdge GlobalType.\nDefines WasmEdge host module registration enum.\n32-bit integer.\n64-bit integer.\nDefines an import object that contains the required import …\nCreates a import object.\nDefines the types of the imported instances.\nRepresents an instantiated module.\nManipulates the runtime logger.\nA WasmEdge instance that is a WasmEdge Memory.\nStruct of WasmEdge MemoryType.\nDefines compiled in-memory representation of an input WASM …\nDefines the mutability property of WasmEdge Global …\nNative dynamic library format.\nThis is a workaround solution to the <code>never</code> type in Rust. …\nDisable as many optimizations as possible.\nOptimize quickly without destroying debuggability.\nOptimize for fast execution as much as possible without …\nOptimize for fast execution as much as possible.\nContains the success value\nOptimize for small code size as much as possible without …\nOptimize for small code size as much as possible.\nDefines WasmEdge reference types.\nUsed to collect statistics of the WasmEdge runtime, such …\nThe Store is a collection of registered modules and …\nA WasmEdge instance that is a WasmEdge Table.\nStruct of WasmEdge TableType.\nA reference that unsupported by c-api.\n128-bit vector of packed integer or floating-point data.\nDefines WasmEdge value types.\nIdentifies a mutable global variable.\nA Vm defines a virtual environment for managing …\nThe Wasm type.\nWebAssembly with AOT compiled codes in custom sections.\nThe WasmEdge result type.\nDefines the function converting a value of Rust type to …\nDescribes the mapping of Rust type to Wasm type.\nDescribes the mapping of a tuple of Rust types to Wasm …\nWebAssembly value type.\nReturns a reference to the active module instance from …\nReturns a mutable reference to the active module instance …\nReturns the types of the arguments of a host function.\nReturns the number of the arguments of a host function.\nSafety\nDeclare a native async function that will be used to …\nCreates a new ImportObject.\nCompiles the given wasm bytes into a shared library file (*…\nCompiles the given wasm file into a shared library file (*…\nDefines the structs used to construct configurations.\nChecks if the store contains a named module instance.\nChecks if the vm contains a named module instance.\nReturns the total cost in execution.\nReturns the instruction count in execution.\nReturns the count of the exported WasmEdge instances from …\nReturns the count of the imported WasmEdge instances in …\nReturns the instruction count per second in execution.\nReturns the element type defined in the TableType.\nDefines WasmEdge error types.\nReturns the export types of all exported WasmEdge …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads a WebAssembly binary module from in-memory bytes.\nReturns a validated module from a file.\nReturns the length of the exported function instances in …\nReturns the length of the exported function instances in …\nReturns the names of the exported function instances in …\nReturns the names of the exported function instances in …\nGets the export type by the name of a specific exported …\nReturns the exported function instance by name.\nReturns the exported function instance by name.\nReturns the exported function instance by name.\nReturns the exported function instance by name.\nReturns the exported global instance by name.\nReturns the exported global instance by name.\nReturns the exported memory instance by name.\nReturns the exported memory instance by name.\nReturns the exported table instance by name.\nReturns the exported table instance by name.\nReturns the length of the exported global instances in …\nReturns the length of the exported global instances in …\nReturns the names of the exported global instances in this …\nReturns the names of the exported global instances in this …\nDeclare a native function that will be used to create a …\nReturns the import types of all imported WasmEdge …\nReturns the names of all registered named module instances.\nReturns the names of all named module instances this vm …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogs the debug information.\nLogs the error information.\nSets the logging system off.\nReturns the maximum size defined in the TableType.\nReturns the maximum size defined in the MemoryType.\nReturns the length of the exported memory instances in …\nReturns the length of the exported memory instances in …\nReturns the names of all exported memory instances in this …\nReturns the names of all exported memory instances in this …\nReturns the minimum size defined in the TableType.\nReturns the minimum size defined in the MemoryType.\nReturns the name of the module hosting the imported …\nReturns the value mutability property defined in the …\nReturns the name of this exported module instance.\nReturns the name of this exported module instance.\nReturns the imported name of the WasmEdge instance.\nReturns the exported name of the WasmEdge instance.\nReturns the number of the named module instances in this …\nReturns the count of the named module instances this vm …\nCreates a new Store.\nCreates a new AOT compiler.\nCreates a new ImportObjectBuilder.\nCreates a new FuncType with the given types of arguments …\nCreates a new TableType with the given element type and …\nCreates a new MemoryType with the given size range.\nCreates a new GlobalType with the given value type and …\nCreates a new Statistics.\nGenerates arguments of WasmValue types.\nDefines plugin related structs.\nRegisters and instantiates a WasmEdge compiled module into …\nRegisters a wasm module into this vm as a named or active …\nReturns the types of the returns of a host function.\nReturns the number of the returns of a host function.\nRuns an exported wasm function in a (named or active) …\nRuns an exported wasm function in a (named or active) …\nSets the cost limit in execution.\nSets the cost of instructions.\nReturns whether the memory is shared.\nReturns a reference to the internal store from this vm.\nReturns a mutable reference to the internal store from …\nReturns the length of the exported table instances in this …\nReturns the length of the exported table instances in this …\nReturns the names of the exported table instances in this …\nReturns the names of the exported table instances in this …\nReturns the type of the imported WasmEdge instance, which …\nReturns the type of the exported WasmEdge instance, which …\nDefines the general types.\nDefines WasmEdge Driver and CoreVersion types\nReturns the value type defined in the GlobalType.\nGet the Wasm types for the tuple (list) of currently …\nParses in-memory bytes as either the WebAssembly Text …\nAdds a host function to the ImportObject to create.\nAdds a host function to the ImportObject to create.\nAdds a global to the ImportObject to create.\nAdds a memory to the ImportObject to create.\nAdds a table to the ImportObject to create.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines WasmEdge Vm struct.\nDefines an import object that contains the required import …\nCreates a async import object.\nCreates a new ImportObject.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new ImportObjectBuilder.\nAdds a host function to the ImportObject to create.\nAdds a host function to the ImportObject to create.\nAdds a global to the ImportObject to create.\nAdds a memory to the ImportObject to create.\nAdds a table to the ImportObject to create.\nA Vm defines a virtual environment for managing …\nReturns a reference to the active module instance from …\nReturns a mutable reference to the active module instance …\nChecks if the vm contains a named module instance.\nReturns the argument unchanged.\nReturns the names of all named module instances this vm …\nCalls <code>U::from(self)</code>.\nReturns the count of the named module instances this vm …\nRegisters a wasm module into this vm as a named or active …\nRuns an exported wasm function in a (named or active) …\nRuns an exported wasm function in a (named or active) …\nReturns a reference to the internal store from this vm.\nReturns a mutable reference to the internal store from …\nA AsyncWasiModule is a module instance for the WASI …\nCreates a AsyncWasiModule instance.\nCreates a AsyncWasiModule instance with the given wasi …\nReturns the WASI exit code.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the name of the module instance.\nDefines the common configuration options.\nDefines a group of configuration options for AOT compiler.\nDefines Config struct used to check/set the configuration …\nDefines a builder for creating a Config.\nDefines a group of runtime configuration options.\nDefines a group of the statistics configuration options.\nCreates a new Config from the ConfigBuilder.\nEnables or disables the BulkMemoryOperations option.\nChecks if the BulkMemoryOperations option turns on or not.\nChecks if the cost measuring option turns on or not.\nSets the instruction counting option.\nCreates a new default instance of CommonConfigOptions.\nSets the dump IR option of AOT compiler.\nChecks if the dump IR option turns on or not.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnables or disables the FunctionReferences option.\nChecks if the FunctionReferences option turns on or not.\nEnables or disables the GC option.\nSets the generic binary option of AOT compiler.\nChecks if the generic binary option of AOT compiler turns …\nChecks if the instruction counting option turns on or not.\nEnables or disables the <code>ForceInterpreter</code> option.\nChecks if the <code>ForceInterpreter</code> option turns on or not.\nEnables or Disables the <code>Interruptible</code> option of AOT …\nChecks if the <code>Interruptible</code> option of AOT Compiler turns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of the memory pages available.\nSets the maximum number of the memory pages available.\nSets the cost measuring option.\nSets the time measuring option.\nEnables or disables the MultiMemories option.\nChecks if the MultiMemories option turns on or not.\nEnables or disables the MultiValue option.\nChecks if the MultiValue option turns on or not.\nEnables or disables the ImportExportMutGlobals option.\nChecks if the ImportExportMutGlobals option turns on or …\nCreates a new ConfigBuilder with the given …\nCreates a new instance of CommonConfigOptions.\nCreates a new instance of CompilerConfigOptions.\nCreates a new instance of RuntimeConfigOptions.\nCreates a new instance of StatisticsConfigOptions.\nEnables or disables the NonTrapFloatToIntConversions …\nChecks if the NonTrapFloatToIntConversions option turns on …\nReturns the optimization level of AOT compiler.\nSets the optimization level of AOT compiler.\nReturns the output binary format of AOT compiler.\nSets the output binary format of AOT compiler.\nEnables or disables the ReferenceTypes option.\nChecks if the ReferenceTypes option turns on or not.\nEnables or disables the SignExtensionOperators option.\nChecks if the SignExtensionOperators option turns on or …\nEnables or disables the SIMD option.\nChecks if the SIMD option turns on or not.\nEnables or disables the TailCall option.\nChecks if the TailCall option turns on or not.\nEnables or disables the Threads option.\nChecks if the Threads option turns on or not.\nChecks if the cost measuring option turns on or not.\nSets the CompilerConfigOptions for the ConfigBuilder.\nSets the RuntimeConfigOptions for the ConfigBuilder.\nSets the StatisticsConfigOptions for the ConfigBuilder.\nErrors raised by WasmEdge Core.\nThe error type for the common errors from WasmEdge Core.\nThe error type for the component model phase from WasmEdge …\nThe error types raised by WasmEdge Core.\nThe error type for the execution phase from WasmEdge Core.\nThe error type for the instantiation phase from WasmEdge …\nThe error type for the load phase from WasmEdge Core.\nThe error type for the validation phase from WasmEdge Core.\nThe error types for WasmEdge ExportType.\nThe error types for WasmEdge Function.\nThe error types for WasmEdge Global.\nThe error type for the host function definition.\nThe error types for WasmEdge ImportType.\nThe error types for WasmEdge Instance.\nThe error types for WasmEdge Memory.\nThe error types for WasmEdge plugin.\nThe error types for WasmEdge Store.\nThe error types for WasmEdge Table.\nThe error types for WasmEdge Vm.\nThe error types used by both wasmedge-sys and wasmedge …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefine where the graph should be executed.\nDescribes the encoding of the graph.\nPreload config for initializing the wasi_nn plug-in.\nRepresents a loaded plugin. It provides the APIs for …\nDefines the API to manage plugins.\nReturns the count of loaded plugins.\nDefines low-level types used in Plugin development.\nReturns the target plugin by its name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the <code>wasmedge_process</code> plugin module instance …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad plugins from the given path.\nReturns the count of the module instances in this plugin.\nReturns a module instance that is generated from the …\nReturns the names of all module instances in this plugin.\nReturns the name of this plugin.\nReturns the names of all loaded plugins.\nCreates a new preload config.\nInitialize the wasi_nn plug-in with the preloads.\nModule descriptor for plugins.\nPlugin descriptor for plugins.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA reference to opaque data in the wasm instance.\nA reference to a host function.\n32-bit floating-point data as defined by the IEEE 754-2019.\n64-bit floating-point data as defined by the IEEE 754-2019.\n32-bit integer.\n64-bit integer.\n128-bit vector of packed integer or floating-point data.\nDefines runtime values that a WebAssembly module can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of ExternRef wrapping the given …\nThe version info of WasmEdge core\nDefines WasmEdge Driver functions\nTriggers the WasmEdge AOT compiler tool\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the major version value of WasmEdge core.\nReturns the minor version value of WasmEdge core.\nReturns the patch version value of WasmEdge core.\nTriggers the WasmEdge runtime tool\nTriggers the WasmEdge unified tool\nReturns the version string of WasmEdge core.\nA WasiModule is a module instance for the WASI …\nCreates a WASI host module which contains the WASI host …\nReturns the WASI exit code.\nReturns the argument unchanged.\nReturns the native handler from the mapped FD/Handler.\nInitializes the WASI host module with the given parameters.\nCalls <code>U::from(self)</code>.\nReturns the name of the module instance.")