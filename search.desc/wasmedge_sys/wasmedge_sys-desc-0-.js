searchState.loadedDescShard("wasmedge_sys", 0, "Overview\nThe object as an module instance is required to implement …\nRepresents a calling frame on top of stack.\nDefines WasmEdge ahead-of-time(AOT) compiler and the …\nDefines Config struct used to check/set the configuration …\nDefines an execution environment for both pure WASM and …\nDefines the types of the exported wasm values.\nDefines a reference to a host function.\nStruct of WasmEdge FuncType.\nDefines a host function.\nDefines a WebAssembly global variable, which stores a …\nStruct of WasmEdge GlobalType.\nAn ImportModule represents a host module with a name. A …\nDefines the types of the imported wasm value.\nAn Instance represents an instantiated module. In the …\nLoader is used to load WASM modules from the given WASM …\nDefines a WebAssembly memory instance, which is a linear …\nStruct of WasmEdge MemoryType.\nDefines compiled in-memory representation of an input WASM …\nStruct of WasmEdge Statistics.\nThe Store is a collection of registered modules and …\nA WasmEdge Table defines a WebAssembly table instance …\nStruct of WasmEdge TableType.\nStruct of WasmEdge Validator.\nType of wasi context that is used to configure the wasi …\nA WasiModule is a module instance for the WASI …\nDefines a WebAssembly value.\nEnables or disables the Annotations option. By default, …\nChecks if the Annotations option turns on or not.\nReturns the types of the arguments of a host function.\nReturns the number of the arguments of a host function.\nSafety\nProvides a raw pointer to the inner ImportType context.\nProvides a raw pointer to the inner Compiler context.\nProvides a raw pointer to the inner Configure context.\nProvides a raw pointer to the inner Statistics context.\nProvides a raw pointer to the inner Validator context.\nDefines <code>async</code> related types.\nEnables or disables the BulkMemoryOperations option. By …\nChecks if the BulkMemoryOperations option turns on or not.\nRuns a host function instance and returns the results.\nAsynchronously runs a host function instance and returns …\nAsynchronously runs a host function instance with a …\nRuns a host function reference instance and returns the …\nAsynchronously runs a host function reference instance and …\nRun a host function instance and return the results or …\nClears the data in this statistics.\nCompiles the input WASM from the given bytes for the AOT …\nCompiles the input WASM from the given file path for the …\nChecks if the Store contains a module of which the name …\nReturns the total cost in execution.\nSets the instruction counting option. By default, the …\nReturns the count of wasm exports in the Module.\nReturns the number of wasm imports in the Module.\nCreates a new AOT compiler.\nCreates a new Config.\nCreates a new executor to be associated with the given …\nCreate a new Loader to be associated with the given global …\nCreates a new Statistics.\nCreates a new Store.\nCreates a new Validator to be associated with the given …\nSets the dump IR option of AOT compiler. By default, the …\nChecks if the dump IR option turns on or not.\nReturns the element type defined in the TableType.\nEnables or disables the ExceptionHandling option. By …\nChecks if the ExceptionHandling option turns on or not.\nReturns the types of wasm exports in the Module.\nForeign function interfaces generated from WasmEdge C-API.\nDefines WasmEdge CallingFrame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads a WASM module from a in-memory bytes.\nLoads a WASM module from a WASM file.\nReturns the length of the exported function instances in …\nReturns the names of the exported function instances in …\nEnables or disables the FunctionReferences option. By …\nChecks if the FunctionReferences option turns on or not.\nEnables or disables the GC option. By default, the option …\nChecks if the GC option turns on or not.\nSets the generic binary option of AOT compiler. By …\nChecks if the generic binary option of AOT compiler turns …\nReturns the output binary format of AOT compiler.\nReturns the optimization level of AOT compiler.\nReturns the exported function instance by name.\nReturns the exported function instance by name.\nReturns the exported global instance by name.\nReturns the number of the memory pages available.\nReturns the exported memory instance by name.\nReturns the exported table instance by name.\nReturns the length of the exported global instances in …\nReturns the names of the exported global instances in this …\nReturns the types of wasm imports in the Module.\nDefines WasmEdge instance structs, including Function, …\nReturns the instruction count in execution.\nReturns the instruction count per second in execution.\nEnables or disables the <code>ForceInterpreter</code> option. By …\nChecks if the <code>ForceInterpreter</code> option turns on or not.\nEnables or Disables the <code>Interruptible</code> option of AOT …\nChecks if the <code>Interruptible</code> option of AOT Compiler turns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the cost measuring option turns on or not.\nChecks if the instruction counting option turns on or not.\nChecks if the time measuring option turns on or not.\nReturns the maximum size defined in the TableType.\nReturns the maximum size defined in the MemoryType.\nSets the cost measuring option. By default, the option is …\nSets the time measuring option. By default, the option is …\nReturns the length of the exported memory instances in …\nReturns the names of all exported memory instances in this …\nEnables or disables the Memory64 option. By default, the …\nChecks if the Memory64 option turns on or not.\nReturns the minimum size defined in the TableType.\nReturns the minimum size defined in the MemoryType.\nReturns the module instance by the module name.\nReturns the length of the registered modules.\nReturns the module name that this import is expected to …\nReturns the names of all registered modules.\nEnables or disables the MultiMemories option. By default, …\nChecks if the MultiMemories option turns on or not.\nEnables or disables the MultiValue option. By default, the …\nChecks if the MultiValue option turns on or not.\nReturns the value mutability property defined in the …\nEnables or disables the ImportExportMutGlobals option. By …\nChecks if the ImportExportMutGlobals option turns on or …\nReturns the name of this exported module instance.\nReturns the field name of the module that this import is …\nReturns the name by which this export is known by.\nCreates a new FuncType with the given types of arguments …\nCreates a new TableType with the given element type and …\nCreates a new MemoryType with the given size range.\nCreates a new GlobalType with the given value type and …\nEnables or disables the NonTrapFloatToIntConversions …\nChecks if the NonTrapFloatToIntConversions option turns on …\nDefines PluginManager and Plugin structs.\nEnables or disables the ReferenceTypes option. By default, …\nChecks if the ReferenceTypes option turns on or not.\nRegisters and instantiates a WasmEdge module into a store …\nRegisters and instantiates a import module into a store.\nRegisters and instantiates a WasmEdge module into a store.\nReturns the types of the returns of a host function.\nReturns the number of the returns of a host function.\nSets the output binary format of AOT compiler. By default, …\nSets the optimization level of AOT compiler. By default, …\nSets the cost limit in execution.\nSets the cost of instructions.\nSets the maximum number of the memory pages available.\nReturns whether the memory is shared.\nEnables or disables the SignExtensionOperators option. By …\nChecks if the SignExtensionOperators option turns on or …\nEnables or disables the SIMD option. By default, the …\nChecks if the SIMD option turns on or not.\nReturns the length of the exported table instances in this …\nReturns the names of the exported table instances in this …\nEnables or disables the TailCall option. By default, the …\nChecks if the TailCall option turns on or not.\nEnables or disables the Threads option. By default, the …\nChecks if the Threads option turns on or not.\nReturns the type of this import.\nReturns the type of this export.\nDefines the WebAssembly primitive types.\nDefines the versioning and logging functions.\nValidates a given WasmEdge Module.\nReturns the value type defined in the GlobalType.\nDefines data structure for WasmEdge async mechanism.\nDefines an async execution context.\nDefines a async state that contains the pointer to current …\nReturns an async execution context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new async state.\nCreates a new async execution context.\nCreates an async host function with the given function …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA AsyncWasiModule is a module instance for the WASI …\nCreates a AsyncWasiModule instance.\nCreates a AsyncWasiModule instance with the given wasi …\nReturns the WASI exit code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the name of the module instance.\nBoolean to describe has max value or not.\nMaximum value. Will be ignored if the <code>HasMax</code> is false.\nMinimum value.\nNo value.\nNo value.\nBoolean to describe is shared memory or not.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nDeletion of the WasmEdge_ASTModuleContext.\nList the exports of the AST module.\nGet the length of exports list of the AST module.\nList the imports of the AST module.\nGet the length of imports list of the AST module.\nCancel a WasmEdge_Async execution.\nDeletion of the WasmEdge_Async.\nWait and get the result of WasmEdge_Async execution.\nWait and get the return list length of the WasmEdge_Async …\nWait a WasmEdge_Async execution.\nWait a WasmEdge_Async execution with timeout.\nWasmEdge bytes struct.\nCreation of the WasmEdge_Bytes with the buffer and its …\nDeletion of the WasmEdge_Bytes.\nCreate the WasmEdge_Bytes wraps to the buffer.\nGet the executor context from the current calling frame.\nGet the memory instance by index from the module instance …\nGet the module instance of the current calling frame.\nCompile the input WASM from the file path.\nCompile the input WASM from the given buffer.\nCompile the input WASM from a WasmEdge_Bytes.\nCreation of the WasmEdge_CompilerContext.\nDeletion of the WasmEdge_CompilerContext.\nAdd a built-in host registration setting into …\nAdd a proposal setting into the WasmEdge_ConfigureContext.\nGet the optimization level of the AOT compiler.\nGet the output binary format of the AOT compiler.\nGet the dump IR option of the AOT compiler.\nGet the generic binary option of the AOT compiler.\nGet the interruptible option of the AOT compiler.\nSet the dump IR option of the AOT compiler.\nSet the generic binary option of the AOT compiler.\nSet the interruptible option of the AOT compiler.\nSet the optimization level of the AOT compiler.\nSet the output binary format of the AOT compiler.\nCreation of the WasmEdge_ConfigureContext.\nDeletion of the WasmEdge_ConfigureContext.\nGet the setting of the page limit of memory instances.\nCheck if a built-in host registration setting exists in the\nCheck if a proposal setting exists in the …\nGet the AllowAFUNIX option.\nGet the force interpreter mode execution option.\nRemove a built-in host registration setting in the …\nRemove a proposal setting in the WasmEdge_ConfigureContext.\nSet the option of enabling/disabling AF_UNIX support in …\nSet the force interpreter mode execution option.\nSet the page limit of memory instances.\nGet the cost measuring option for the statistics.\nGet the instruction counting option for the statistics.\nGet the time measuring option for the statistics.\nSet the cost measuring option for the statistics.\nSet the instruction counting option for the statistics.\nSet the time measuring option for the statistics.\nEntrypoint for the compiler tool.\nEntrypoint for the runtime tool.\nEntrypoint for the unified tool.\nAsynchronous invoke a WASM function by the function …\nCreation of the WasmEdge_ExecutorContext.\nDeletion of the WasmEdge_ExecutorContext.\nRegister a host function that will be invoked after …\nRegister a host function that will be invoked before …\nInstantiate an AST Module into a module instance.\nInvoke a WASM function by the function instance.\nInstantiate an AST Module into a named module instance and …\nRegister a module instance into a store with exporting its …\nGet the external name from an export type.\nGet the external type from an export type.\nGet the external value (which is function type) from an …\nGet the external value (which is global type) from an …\nGet the external value (which is memory type) from an …\nGet the external value (which is table type) from an …\nGet the external value (which is tag type) from an export …\nCreation of the WasmEdge_FunctionInstanceContext for host …\nCreation of the WasmEdge_FunctionInstanceContext for host …\nDeletion of the WasmEdge_FunctionInstanceContext.\nGet the function data field of the function instance.\nGet the function type context of the function instance.\nCreation of the WasmEdge_FunctionTypeContext.\nDeletion of the WasmEdge_FunctionTypeContext.\nGet the parameter types list from the …\nGet the parameter types list length from the …\nGet the return types list from the …\nGet the return types list length from the …\nCreation of the WasmEdge_GlobalInstanceContext.\nDeletion of the WasmEdge_GlobalInstanceContext.\nGet the global type context from a global instance.\nGet the value from a global instance.\nSet the value into a global instance.\nCreation of the WasmEdge_GlobalTypeContext.\nDeletion of the WasmEdge_GlobalTypeContext.\nGet the mutability from a global type.\nGet the value type from a global type.\nGet the external name from an import type.\nGet the external type from an import type.\nGet the external value (which is function type) from an …\nGet the external value (which is global type) from an …\nGet the external value (which is memory type) from an …\nGet the module name from an import type.\nGet the external value (which is table type) from an …\nGet the external value (which is tag type) from an import …\nStruct of WASM limit.\nCompare the two WasmEdge_Limit objects.\nCreation of the WasmEdge_LoaderContext.\nDeletion of the WasmEdge_LoaderContext.\nLoad and parse the WASM module from a buffer into …\nLoad and parse the WASM module from a WasmEdge_Bytes into …\nLoad and parse the WASM module from a WASM file into a …\nSerialize the WasmEdge_ASTModuleContext into WASM binary.\nSet the logging system off.\nSet the logging system to filter to debug level.\nSet the logging system to filter to error level.\nCreation of the WasmEdge_MemoryInstanceContext.\nDeletion of the WasmEdge_MemoryInstanceContext.\nCopy the data to the output buffer from a memory instance.\nGet the memory type context from a memory instance.\nGet the current page size (64 KiB of each page) of a …\nGet the data pointer in a memory instance.\nGet the const data pointer in a const memory instance.\nGrow a memory instance with a page size.\nCopy the data into a memory instance from the input buffer.\nCreation of the WasmEdge_MemoryTypeContext.\nDeletion of the WasmEdge_MemoryTypeContext.\nGet the limit from a memory type.\nModule descriptor for plugins.\nAdd a function instance context into a …\nAdd a global instance context into a …\nAdd a memory instance context into a …\nAdd a table instance context into a …\nCreation of the WasmEdge_ModuleInstanceContext.\nCreation of the WasmEdge_ModuleInstanceContext for the …\nCreation of the WasmEdge_ModuleInstanceContext with host …\nDeletion of the WasmEdge_ModuleInstanceContext.\nGet the exported function instance context of a module …\nGet the exported global instance context of a module …\nGet the exported memory instance context of a module …\nGet the exported table instance context of a module …\nGet the exported tag instance context of a module instance.\nGet the host data set into the module instance when …\nGet the export module name of a module instance.\nInitialize the WasmEdge_ModuleInstanceContext for the WASI …\nInitialize the WasmEdge_ModuleInstanceContext for the …\nList the exported function names of a module instance.\nGet the length of exported function list of a module …\nList the exported global names of a module instance.\nGet the length of exported global list of a module …\nList the exported memory names of a module instance.\nGet the length of exported memory list of a module …\nList the exported table names of a module instance.\nGet the length of exported table list of a module instance.\nList the exported tag names of a module instance.\nGet the length of exported tag list of a module instance.\nGet the WASI exit code.\nGet the native handler from the WASI mapped FD/Handler.\nCreate the module instance in the plug-in by the module …\nPlugin descriptor for plugins.\nFind the loaded plug-in context by name.\nGet the plug-in name of the plug-in context.\nInitialize the wasi_nn plug-in.\nList the modules in the plug-in context with their names.\nGet the length of module list in the plug-in context.\nList the loaded plug-ins with their names.\nGet the length of loaded plug-in list.\nLoad the plugin with the given file or directory.\nLoad plugins with the default search paths.\nVersion data for plugins.\nImplement by plugins for returning the plugin descriptor.\nProgram option for plugins.\nType of option value.\nBoolean value.\nBoolean value.\nBoolean value.\nBoolean value.\nBoolean value.\nBoolean value.\nNo option value.\nWasmEdge_String.\nBoolean value.\nBoolean value.\nBoolean value.\nBoolean value.\nBoolean value.\nWasmEdge result struct.\nGenerate the result with code.\nGet the error category.\nGet the result code.\nGet the result message.\nCheck the result is a success or not.\nClear all data in the WasmEdge_StatisticsContext.\nCreation of the WasmEdge_StatisticsContext.\nDeletion of the WasmEdge_StatisticsContext.\nGet the instruction count in execution.\nGet the instruction count per second in execution.\nGet the total cost in execution.\nSet the cost limit in execution.\nSet the costs of instructions.\nCreation of the WasmEdge_StoreContext.\nDeletion of the WasmEdge_StoreContext.\nGet the module instance context by the module name.\nList the registered module names.\nGet the length of registered module list in store.\nWasmEdge string struct.\nCopy the content of WasmEdge_String object to the buffer.\nCreation of the WasmEdge_String with the buffer and its …\nCreation of the WasmEdge_String with the C string.\nDeletion of the WasmEdge_String.\nCompare the two WasmEdge_String objects.\nCreate the WasmEdge_String wraps to the buffer.\nCreation of the WasmEdge_TableInstanceContext.\nCreation of the WasmEdge_TableInstanceContext with the …\nDeletion of the WasmEdge_TableInstanceContext.\nGet the reference value in a table instance.\nGet the size of a table instance.\nGet the table type context from a table instance.\nGrow a table instance with a size.\nSet the reference value into a table instance.\nCreation of the WasmEdge_TableTypeContext.\nDeletion of the WasmEdge_TableTypeContext.\nGet the limit from a table type.\nGet the reference type from a table type.\nGet the tag type context from a tag instance.\nGet the function type from a tag type.\nAsynchronous invoke a WASM function by name.\nAsynchronous invoke a WASM function by its module name and …\nInstantiate the WASM module from a WasmEdge AST Module and …\nInstantiate the WASM module from a buffer and asynchronous …\nInstantiate the WASM module from a WasmEdge_Bytes and …\nInstantiate the WASM module from a WASM file and …\nReset of WasmEdge_VMContext.\nCreation of the WasmEdge_VMContext.\nDeletion of the WasmEdge_VMContext.\nInvoke a WASM function by name.\nInvoke a WASM function by its module name and function …\nGet the current instantiated module in VM.\nGet the executor context used in the WasmEdge_VMContext.\nGet the exported function list.\nGet the length of exported function list.\nGet the function type by function name.\nGet the function type by function name.\nGet the module instance corresponding to the …\nGet the loader context used in the WasmEdge_VMContext.\nGet the registered module in VM by the module name.\nGet the statistics context used in the WasmEdge_VMContext.\nGet the store context used in the WasmEdge_VMContext.\nGet the validator context used in the WasmEdge_VMContext.\nInstantiate the validated WASM module in the VM context.\nList the registered module names in the WasmEdge_VMContext.\nGet the length of registered module list in the …\nLoad the WASM module from loaded WasmEdge AST Module.\nLoad the WASM module from a buffer.\nLoad the WASM module from a WasmEdge_Bytes.\nLoad the WASM module from a WASM file.\nInstantiate and register an AST Module into a named module …\nRegister and instantiate WASM into the store in VM from a …\nRegister and instantiate WASM into the store in VM from a …\nRegister and instantiate WASM into the store in VM from a …\nRegister a module instance into the store in VM with …\nInstantiate the WASM module from a WasmEdge AST Module and …\nInstantiate the WASM module from a buffer and invoke a …\nInstantiate the WASM module from a WasmEdge_Bytes and …\nInstantiate the WASM module from a WASM file and invoke a …\nValidate the WASM module loaded into the VM context.\nWasmEdge WASM value type struct.\nGenerate the ExternRef WASM value type.\nGenerate the F32 WASM value type.\nGenerate the F64 WASM value type.\nGenerate the FuncRef WASM value type.\nGenerate the I32 WASM value type.\nGenerate the I64 WASM value type.\nGenerate the V128 WASM value type.\nCompare the two WasmEdge_ValType objects.\nSpecify the WASM value type is an ExternRef or not.\nSpecify the WASM value type is a F32 or not.\nSpecify the WASM value type is a F64 or not.\nSpecify the WASM value type is a FuncRef or not.\nSpecify the WASM value type is an I32 or not.\nSpecify the WASM value type is an I64 or not.\nSpecify the WASM value type is a Ref (includes nullable …\nSpecify the WASM value type is a nullable Ref or not.\nSpecify the WASM value type is a V128 or not.\nCreation of the WasmEdge_ValidatorContext.\nDeletion of the WasmEdge_ValidatorContext.\nValidate the WasmEdge AST Module.\nWasmEdge WASM value struct.\nGenerate the function reference WASM value.\nGenerate the F32 WASM value.\nGenerate the F64 WASM value.\nGenerate the function reference WASM value.\nGenerate the I32 WASM value.\nGenerate the I64 WASM value.\nGenerate the V128 WASM value.\nRetrieve the external reference from the WASM value.\nRetrieve the F32 value from the WASM value.\nRetrieve the F64 value from the WASM value.\nRetrieve the function instance context from the WASM value.\nRetrieve the I32 value from the WASM value.\nRetrieve the I64 value from the WASM value.\nRetrieve the V128 value from the WASM value.\nSpecify the WASM value is a null reference or not.\nGet the version string of the WasmEdge C API.\nGet the major version value of the WasmEdge C API.\nGet the minor version value of the WasmEdge C API.\nGet the patch version value of the WasmEdge C API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a calling frame on top of stack.\nReturns an mutable smart pointer borrowing the memory …\nReturns an immutable smart pointer borrowing the memory …\nStruct of WasmEdge FuncType.\nStruct of WasmEdge GlobalType.\nStruct of WasmEdge MemoryType.\nStruct of WasmEdge TableType.\nSafety\nSafety\nSafety\nSafety\nReturns the argument unchanged.\nDefines WasmEdge Function and FuncType structs.\nDefines WasmEdge Global and GlobalType structs.\nCalls <code>U::from(self)</code>.\nDefines WasmEdge Memory and MemType structs.\nDefines WasmEdge Instance and other relevant types.\nDefines WasmEdge Table and TableType structs.\nDefines a reference to a host function.\nDefines a host function.\nSafety\nCreates a host function with the given function type.\nCreates a host function with the given function type and …\nSafety\nSafety\nDefines a WebAssembly global variable, which stores a …\nSafety\nCreates a new Global instance to be associated with the …\nSafety\nReturns the value of the Global instance.\nSets the value of the Global instance.\nReturns the underlying wasm type of a Global instance.\nDefines a WebAssembly memory instance, which is a linear …\nSafety\nCreate a new Memory to be associated with the given …\nReturns the const data pointer to the Memory.\nReturns the data pointer to the Memory.\nCopies the data from the Memory to the output buffer.\nGrows this WebAssembly memory by <code>count</code> pages.\nCopies the data from the given input buffer into the Memory…\nReturns the size, in WebAssembly pages (64 KiB of each …\nReturns the type of the Memory.\nThe object as an module instance is required to implement …\nAn ImportModule represents a host module with a name. A …\nAn Instance represents an instantiated module. In the …\nA WasiModule is a module instance for the WASI …\nSafety\nSafety\nCreates a module instance which is used to import host …\nCreates a WASI host module which contains the WASI host …\nReturns the WASI exit code.\nSafety\nReturns the length of the exported function instances in …\nReturns the names of the exported function instances in …\nReturns the exported function instance by name.\nReturns the exported function instance by name.\nReturns the exported global instance by name.\nReturns the exported memory instance by name.\nReturns the native handler from the mapped FD/Handler.\nReturns the exported table instance by name.\nReturns the length of the exported global instances in …\nReturns the names of the exported global instances in this …\nInitializes the WASI host module with the given parameters.\nReturns the length of the exported memory instances in …\nReturns the names of all exported memory instances in this …\nReturns the name of this exported module instance.\nReturns the name of the module instance.\nReturns the length of the exported table instances in this …\nReturns the names of the exported table instances in this …\nA WasmEdge Table defines a WebAssembly table instance …\nSafety\nReturns the capacity of the Table.\nCreates a new Table to be associated with the given …\nSafety\nReturns the element value at a specific position in the …\nIncreases the capacity of the Table.\nSets a new element value at a specific position in the …\nReturns the TableType of the Table.\nDefines the module descriptor for plugins.\nDefines the type of the function that creates a module …\nRepresents a loaded plugin. It provides the APIs for …\nRepresents Plugin descriptor for plugins.\nDefines the APIs for loading plugins and check the basic …\nRepresents a Plugin module instance.\nDefines the version of a plugin.\nDefines the program option for plugins.\nDefines the type of the program options.\nSafety\nReturns the raw pointer to the inner …\nReturns the raw pointer to the inner …\nReturns the count of loaded plugins.\nCreates a new program option.\nCreates a new module descriptor.\nCreates a new plugin version.\nReturns the target plugin by its name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the <code>wasmedge_process</code> plugin module instance …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad a single or multiple plugins from a given path.\nLoad plugins from the default path. The default plugin …\nReturns the count of the module instances in this plugin.\nReturns a plugin module instance that is generated from …\nReturns the names of all module instances in this plugin.\nReturns the name of this plugin.\nReturns the names of all loaded plugins.\nStruct of WasmEdge String.\nDefines a WebAssembly value.\nReturns the raw <code>WasmEdge_Value</code>.\nReturns the reference to an external object.\nReturns the argument unchanged.\nCreates a WasmValue from a reference to an external object.\nCreates a WasmValue from a <code>f32</code> value.\nCreates a WasmValue from a <code>f64</code> value.\nCreates a WasmValue from a FuncRef.\nCreates a WasmValue from a <code>i32</code> value.\nCreates a WasmValue from a <code>i64</code> value.\nSafety\nCreates a WasmValue from a <code>i128</code> value.\nReturns the FuncRef(crate::FuncRef).\nCalls <code>U::from(self)</code>.\nSafety\nChecks if a WasmValue is NullRef or not.\nCreates a null WasmValue with a ExternRef.\nGenerates a <code>f32</code> value from a WasmValue.\nGenerates a <code>f64</code> value from a WasmValue.\nGenerates a <code>i32</code> value from a WasmValue.\nGenerates a <code>i64</code> value from a WasmValue.\nGenerates a <code>v128</code> value from a WasmValue.\nReturns the type of a WasmValue.\nTriggers the WasmEdge AOT compiler tool\nTriggers the WasmEdge runtime tool\nTriggers the WasmEdge unified tool\nLogs the debug information.\nLogs the error information.\nSets the logging system off.\nReturns the major version value.\nReturns the minor version value.\nReturns the patch version value.\nReturns the version string.")